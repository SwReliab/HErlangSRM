// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Cemest
List Cemest(NumericVector t, IntegerVector i, IntegerVector j, IntegerVector n, double omega, NumericMatrix p_, NumericVector lam_, IntegerVector a, NumericVector mu_, IntegerVector b, int gn, double geps, double atol, double rtol, int maxiter);
RcppExport SEXP _HErlangSRM_Cemest(SEXP tSEXP, SEXP iSEXP, SEXP jSEXP, SEXP nSEXP, SEXP omegaSEXP, SEXP p_SEXP, SEXP lam_SEXP, SEXP aSEXP, SEXP mu_SEXP, SEXP bSEXP, SEXP gnSEXP, SEXP gepsSEXP, SEXP atolSEXP, SEXP rtolSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type i(iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type j(jSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lam_(lam_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type gn(gnSEXP);
    Rcpp::traits::input_parameter< double >::type geps(gepsSEXP);
    Rcpp::traits::input_parameter< double >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< double >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(Cemest(t, i, j, n, omega, p_, lam_, a, mu_, b, gn, geps, atol, rtol, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// Cmvfd
NumericVector Cmvfd(NumericVector t, List model);
RcppExport SEXP _HErlangSRM_Cmvfd(SEXP tSEXP, SEXP modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< List >::type model(modelSEXP);
    rcpp_result_gen = Rcpp::wrap(Cmvfd(t, model));
    return rcpp_result_gen;
END_RCPP
}
// Cmvfc
NumericVector Cmvfc(NumericVector t, List model, int gn, double geps);
RcppExport SEXP _HErlangSRM_Cmvfc(SEXP tSEXP, SEXP modelSEXP, SEXP gnSEXP, SEXP gepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type gn(gnSEXP);
    Rcpp::traits::input_parameter< double >::type geps(gepsSEXP);
    rcpp_result_gen = Rcpp::wrap(Cmvfc(t, model, gn, geps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HErlangSRM_Cemest", (DL_FUNC) &_HErlangSRM_Cemest, 15},
    {"_HErlangSRM_Cmvfd", (DL_FUNC) &_HErlangSRM_Cmvfd, 2},
    {"_HErlangSRM_Cmvfc", (DL_FUNC) &_HErlangSRM_Cmvfc, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_HErlangSRM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
